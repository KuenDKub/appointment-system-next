# Cursor Rules for Next.js Template Project

## üöÄ Project Overview

This is a modern Next.js 15 template project with TypeScript, featuring:

- **Frontend**: React 19, Next.js 15 with App Router, HeroUI components, Tailwind CSS
- **Backend**: Next.js API routes, Prisma ORM, PostgreSQL database
- **Authentication**: NextAuth.js v5 (beta)
- **State Management**: React Hook Form with Zod validation
- **File Upload**: Custom image upload with compression
- **Styling**: Tailwind CSS with custom design system
- **Typography**: Athiti font for Thai language
- **Language**: Thai language support throughout the application
- **Notifications**: HeroUI Toast system for user feedback

## üìÅ Project Structure & File Organization

### Core Directory Structure

```
src/
‚îú‚îÄ‚îÄ app/                    # Next.js App Router directory
‚îÇ   ‚îú‚îÄ‚îÄ (authentication)/   # Auth route group
‚îÇ   ‚îú‚îÄ‚îÄ (frontend)/        # Frontend route group
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API routes
‚îÇ   ‚îú‚îÄ‚îÄ auth/              # Auth pages
‚îÇ   ‚îî‚îÄ‚îÄ globals.css        # Global styles
‚îú‚îÄ‚îÄ client/                # Client-side code
‚îÇ   ‚îú‚îÄ‚îÄ actions/           # Client actions
‚îÇ   ‚îú‚îÄ‚îÄ components/        # React components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/          # Authentication components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ forms/     # Auth form components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout/    # Auth layout components
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ shared/    # Shared auth components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ common/        # Common UI components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout/        # Layout components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/         # Page-specific components
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ admin/     # Admin page components
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui/            # Reusable UI components
‚îÇ   ‚îú‚îÄ‚îÄ contexts/          # React contexts
‚îÇ   ‚îú‚îÄ‚îÄ helpers/           # Client utilities
‚îÇ   ‚îú‚îÄ‚îÄ hooks/             # Custom hooks
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/          # Authentication hooks
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ data/          # Data fetching hooks
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ui/            # UI-related hooks
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils/         # Utility hooks
‚îÇ   ‚îú‚îÄ‚îÄ lib/               # Client libraries
‚îÇ   ‚îî‚îÄ‚îÄ providers/         # Context providers
‚îú‚îÄ‚îÄ server/                # Server-side code
‚îÇ   ‚îú‚îÄ‚îÄ actions/           # Server actions
‚îÇ   ‚îú‚îÄ‚îÄ config/            # Server configuration
‚îÇ   ‚îú‚îÄ‚îÄ controllers/       # API controllers
‚îÇ   ‚îú‚îÄ‚îÄ fetches/           # Data fetching utilities
‚îÇ   ‚îú‚îÄ‚îÄ helpers/           # Server utilities
‚îÇ   ‚îú‚îÄ‚îÄ lib/               # Server libraries
‚îÇ   ‚îî‚îÄ‚îÄ models/            # Database models
‚îú‚îÄ‚îÄ schemas/               # Zod validation schemas
‚îÇ   ‚îú‚îÄ‚îÄ client/            # Client-side schemas
‚îÇ   ‚îî‚îÄ‚îÄ server/            # Server-side schemas
‚îú‚îÄ‚îÄ shared/                # Shared utilities
‚îî‚îÄ‚îÄ types/                 # TypeScript type definitions
```

## üéØ Coding Standards & Best Practices

### TypeScript Guidelines

- Use strict TypeScript configuration
- Always define explicit types for function parameters and return values
- Use interfaces for object shapes, types for unions/primitives
- Prefer `type` for union types and `interface` for object definitions
- Use proper generic constraints where applicable
- Export types alongside their corresponding values

### React Component Guidelines

- Use functional components with hooks
- Always use "use client" directive for client components
- Keep components small and focused (single responsibility)
- Use proper prop typing with TypeScript interfaces
- Implement proper error boundaries
- Use React.memo() for performance optimization when needed

### File Naming Conventions

- Components: PascalCase (e.g., `UserProfile.tsx`)
- Hooks: camelCase starting with "use" (e.g., `useImageUpload.ts`)
- Utilities: camelCase (e.g., `imageUtils.ts`)
- Types: camelCase with .ts extension (e.g., `user.ts`)
- Schemas: kebab-case with suffix (e.g., `auth-schema.ts`)
- Actions: kebab-case with suffix (e.g., `user-action.ts`)

### Import Organization

Use the following import order:

1. React and Next.js imports
2. Third-party libraries
3. UI component libraries (@heroui/react, @heroicons/react)
4. Internal components and utilities (using path aliases)
5. Type-only imports (use `import type`)

Example:

```typescript
import { useEffect, useState } from "react";

import { NextPage } from "next";

import { CustomComponent } from "@/client/components/CustomComponent";
import { UserService } from "@/server/services/user-service";
import type { User } from "@/types/user";
import { UserIcon } from "@heroicons/react/24/outline";
import { Button, Card } from "@heroui/react";
```

## üõ† Component Architecture

### Client Components Structure

```typescript
"use client";

import { ComponentProps } from "react";
import { Button } from "@heroui/react";
import { useToast } from "@/client/hooks/ui/useToast";

interface ComponentNameProps {
  // Props definition
}

export const ComponentName = ({ ...props }: ComponentNameProps) => {
  const { success, error, warning, info } = useToast();

  // Component logic
  return (
    <div>
      {/* JSX */}
    </div>
  );
};

export default ComponentName;
```

### Server Components Structure

```typescript
import { ComponentProps } from "react";
import { serverAction } from "@/server/actions/server-action";

interface ComponentNameProps {
  // Props definition
}

export const ComponentName = async ({ ...props }: ComponentNameProps) => {
  // Server-side logic
  const data = await serverAction();

  return (
    <div>
      {/* JSX */}
    </div>
  );
};

export default ComponentName;
```

### Custom Hooks Pattern

```typescript
import { useCallback, useState } from "react";

import { useToast } from "@/client/hooks/ui/useToast";

export interface UseCustomHookReturn {
  // Return type definition
}

export const useCustomHook = (): UseCustomHookReturn => {
  const { success, error } = useToast();

  // Hook logic
  return {
    // Hook return values
  };
};
```

## üîê Authentication & Authorization

### NextAuth.js v5 Configuration

- Use the beta version (5.0.0-beta.25)
- Implement proper session handling
- Use proper TypeScript augmentation for session types
- Follow the established auth patterns in `src/auth.ts`

### Protected Routes

- Use `ProtectedRoute` component wrapper
- Implement proper role-based access control
- Check authentication status in server components when needed

## üìä Database & Schema Management

### Prisma Guidelines

- Use proper Prisma schema definitions
- Implement proper relationships between models
- Use enums for status/role fields
- Follow the established naming conventions (camelCase for fields)
- Always use transactions for multiple related operations

### Schema Validation

- Use Zod for all form validation
- **Separate client and server schemas** in different directories:
  - `@/schemas/client/` - Form validation schemas with detailed error messages
  - `@/schemas/server/` - API/Database validation schemas
- Include Thai language error messages in client schemas
- Implement proper schema refinements for complex validation

Example Client Schema (forms):

```typescript
// src/schemas/client/user-schema.ts
import { z } from "zod";

export const CreateUserFormSchema = z
  .object({
    firstName: z.string().min(2, "‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
    lastName: z.string().min(2, "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
    email: z.string().email("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"),
    password: z.string().min(6, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
    confirmPassword: z.string().min(6, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
  })
  .superRefine((data, ctx) => {
    if (data.password !== data.confirmPassword) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
        path: ["confirmPassword"],
      });
    }
  });

export type CreateUserFormSchema = z.infer<typeof CreateUserFormSchema>;
```

Example Server Schema (API/DB operations):

```typescript
// src/schemas/server/user-schema.ts
import { z } from "zod";

export const CreateUserSchema = z.object({
  firstName: z.string().min(2).max(50),
  lastName: z.string().min(2).max(50),
  email: z.string().email(),
  phoneNumber: z.string().optional(),
  password: z.string().min(6),
  role: z.enum(["admin", "user", "moderator"]).default("user"),
  status: z.enum(["active", "inactive", "suspended"]).default("active"),
});

export type CreateUserSchema = z.infer<typeof CreateUserSchema>;
```

## üé® UI/UX Guidelines

### HeroUI Component Usage

- Use HeroUI components consistently throughout the application
- Follow the established design patterns
- Implement proper responsive design
- Use the custom color scheme and theme consistently

### Styling Guidelines

- Use Tailwind CSS for all styling
- Follow mobile-first responsive design
- Use the established spacing and color system
- Implement proper dark/light mode support if needed

### Typography Guidelines

- **Primary Font**: Athiti for Thai text (`.font-athiti`)
- **Font Weights**: 200 (Extra Light) to 700 (Bold)
- **Usage**: Apply `.font-athiti` class to Thai text containers
- **Responsive**: Font sizes scale appropriately on different devices

### Tailwind CSS v4 Guidelines

#### Configuration Structure

**No `tailwind.config.ts`** - Configuration is now in CSS:

```css
/* src/app/globals.css */
@import "tailwindcss";
@plugin './hero.ts';
@plugin "tailwindcss-debug-screens";

@source '../../node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}';

@custom-variant dark (&:is(.dark *));

:root {
  --background: #ffffff;
  --foreground: #171717;
  --primary: #1e293b;
  --secondary: #981417;
  --font-athiti: "Athiti", sans-serif;
}

@theme {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-athiti);
  --color-primary: var(--primary);
  --color-secondary: var(--secondary);

  --color-primary-50: #eff6ff;
  --color-primary-100: #dbeafe;
  --color-primary-200: #bfdbfe;
  --color-primary-300: #93c5fd;
  --color-primary-400: #60a5fa;
  --color-primary-500: #3b82f6;
  --color-primary-600: #2563eb;
  --color-primary-700: #1d4ed8;
  --color-primary-800: #1e40af;
  --color-primary-900: #1e3a8a;

  --color-secondary-50: #f0fdf4;
  --color-secondary-100: #dcfce7;
  --color-secondary-200: #bbf7d0;
  --color-secondary-300: #86efac;
  --color-secondary-400: #4ade80;
  --color-secondary-500: #22c55e;
  --color-secondary-600: #16a34a;
  --color-secondary-700: #15803d;
  --color-secondary-800: #166534;
  --color-secondary-900: #14532d;

  --color-accent-50: #fffbeb;
  --color-accent-100: #fef3c7;
  --color-accent-200: #fde68a;
  --color-accent-300: #fcd34d;
  --color-accent-400: #fbbf24;
  --color-accent-500: #f59e0b;
  --color-accent-600: #d97706;
  --color-accent-700: #b45309;
  --color-accent-800: #92400e;
  --color-accent-900: #78350f;

  --font-family-athiti: var(--font-athiti);

  --animation-fade-in: fadeIn 0.5s ease-in-out;
  --animation-slide-up: slideUp 0.3s ease-out;
  --animation-slide-down: slideDown 0.3s ease-out;
}
```

#### PostCSS Configuration

```javascript
// postcss.config.mjs
export default {
  plugins: {
    "@tailwindcss/postcss": {}, // ‚úÖ Correct for v4
    autoprefixer: {},
  },
};
```

#### Key Differences from v3

1. **No `tailwind.config.ts`** - Configuration is now in CSS
2. **`@theme` directive** - Replaces `theme.extend` in config
3. **CSS Variables** - Colors and other values are defined as CSS custom properties
4. **`@import "tailwindcss"`** - New import syntax
5. **`@plugin` directive** - Plugin loading in CSS
6. **`@source` directive** - Source file inclusion

#### Customization

**Adding Custom Colors:**

```css
@theme {
  --color-custom-50: #f0f9ff;
  --color-custom-100: #dbeafe;
  --color-custom-500: #0ea5e9;
  --color-custom-900: #0c4a6e;
}
```

**Adding Custom Fonts:**

```css
@theme {
  --font-family-custom: "Your Custom Font", sans-serif;
}
```

**Adding Custom Animations:**

```css
@theme {
  --animation-bounce: bounce 1s infinite;
}

@keyframes bounce {
  0%,
  100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: none;
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}
```

#### VS Code Setup

```json
{
  "tailwindCSS.experimental.configFile": "src/app/globals.css",
  "tailwindCSS.includeLanguages": {
    "typescript": "javascript",
    "typescriptreact": "javascript"
  }
}
```

#### Troubleshooting

**PostCSS Plugin Error:**

```bash
Error: It looks like you're trying to use `tailwindcss` directly as a PostCSS plugin
```

**Solution**: Use `@tailwindcss/postcss` instead of `tailwindcss`:

```javascript
// postcss.config.mjs
export default {
  plugins: {
    "@tailwindcss/postcss": {}, // ‚úÖ Correct
    // "tailwindcss": {},       // ‚ùå Wrong
    autoprefixer: {},
  },
};
```

### Icon Usage

- Use Heroicons for all icons
- Prefer outline variants for most use cases
- Use solid variants for filled states
- Maintain consistent icon sizes (24px standard)

## üîÑ State Management

### Form State Management

- Use React Hook Form for all forms
- Implement proper form validation with Zod
- Use controlled components pattern
- Handle form errors gracefully with Thai messages

### Server State Management

- Use Next.js built-in caching where appropriate
- Implement proper error handling for server actions
- Use proper loading states
- Implement optimistic updates when appropriate

## üìÅ File Upload Guidelines

### Image Upload Implementation

- Use the established `useImageUpload` hook
- Implement proper image compression
- Validate file types and sizes
- Handle upload progress and errors
- Support multiple upload types (car, user-proof, etc.)

## üåê Server-Side Architecture Patterns

### Primary Approach: Server Actions with Controllers

**‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ API routes ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Server Actions ‡πÅ‡∏ó‡∏ô** - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:

- Form submissions
- Database operations
- Data mutations
- Server-side validations

### Server Actions Pattern

```typescript
"use server";

import { revalidatePath } from "next/cache";

import { auth } from "@/auth";
import { UserController } from "@/server/controllers/user-controller";

export async function createUserAction(formData: FormData) {
  const session = await auth();
  if (!session) {
    throw new Error("Unauthorized");
  }

  try {
    // ‡πÉ‡∏ä‡πâ Controller pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö business logic
    const result = await UserController.createUser({
      name: formData.get("name") as string,
      email: formData.get("email") as string,
    });

    revalidatePath("/users");
    return { success: true, data: result };
  } catch (error) {
    return { success: false, error: error.message };
  }
}
```

### Controller Pattern

```typescript
// src/server/controllers/user-controller.ts
import { prisma } from "@/server/lib/prisma";
import { CreateUserData, UpdateUserData } from "@/types/user";

export class UserController {
  static async createUser(data: CreateUserData) {
    return await prisma.user.create({
      data: {
        name: data.name,
        email: data.email,
        // ... other fields
      },
    });
  }

  static async updateUser(id: string, data: UpdateUserData) {
    return await prisma.user.update({
      where: { id },
      data,
    });
  }

  static async deleteUser(id: string) {
    return await prisma.user.delete({
      where: { id },
    });
  }
}
```

### API Routes (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)

‡πÉ‡∏ä‡πâ API routes ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ:

- External API integrations
- Webhooks
- Third-party service callbacks
- Public APIs

```typescript
import { NextRequest, NextResponse } from "next/server";

import { auth } from "@/auth";

export async function GET(request: NextRequest) {
  try {
    const session = await auth();
    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // API logic here

    return NextResponse.json({ data: result });
  } catch (error) {
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
```

## üîî Toast Notification Guidelines

### useToast Hook Usage

**‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ form, actions, ‡∏´‡∏£‡∏∑‡∏≠ error handling ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ useToast**

```typescript
import { useToast } from "@/client/hooks/ui/useToast";

export const MyComponent = () => {
  const { success, error, warning, info } = useToast();

  const handleSubmit = async () => {
    try {
      // ... operation
      success({ description: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } catch (err) {
      error({ description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" });
    }
  };

  return (
    // ... JSX
  );
};
```

### Toast Types and Usage

- **Success**: ‡πÄ‡∏°‡∏∑‡πà‡∏≠ operation ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
- **Error**: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
- **Warning**: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
- **Info**: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ

### Available Hooks

- `useToast()` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toast notifications
- `useAsyncOperation()` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö async operations ‡∏û‡∏£‡πâ‡∏≠‡∏° toast
- `useAuth()` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö authentication
- `useImageUpload()` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image upload
- `useUsers()` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö data fetching

## üö® Error Handling System Guidelines

### Server Actions Error Handling

**‡∏ó‡∏∏‡∏Å server action ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ withErrorHandler wrapper**

```typescript
"use server";

import { withErrorHandler } from "@/server/helpers/error-handler";
import { ServerActionResponse } from "@/types/error";

export async function createUserAction(data: CreateUserFormSchema): Promise<ServerActionResponse<{ message: string }>> {
  return withErrorHandler(async () => {
    const user = await createUserController(data);
    revalidatePath("/users");
    return { message: "User created successfully" };
  });
}
```

### Controllers Error Handling

**‡πÉ‡∏ä‡πâ createError ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö custom business logic errors**

```typescript
import { createError } from "@/server/helpers/error-handler";

export async function createUser(data: CreateUserSchema) {
  const existingUser = await prisma.user.findUnique({
    where: { email: data.email },
  });

  if (existingUser) {
    throw createError("CONFLICT_ERROR", "User with this email already exists", "DUPLICATE_EMAIL", { field: "email" });
  }

  // Continue with user creation...
}
```

### Client Components Error Handling

**‡πÉ‡∏ä‡πâ useServerAction ‡∏´‡∏£‡∏∑‡∏≠ useFormServerAction hooks**

```typescript
"use client";

import { useFormServerAction } from "@/client/hooks/utils/useServerAction";
import { createUserAction } from "@/server/actions/user-action";

export const UserForm = () => {
  const { submitForm, isLoading, error } = useFormServerAction({
    showSuccessToast: true,
    showErrorToast: true,
    successMessage: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
  });

  const handleSubmit = async (formData: FormData) => {
    await submitForm(() => createUserAction(formData), (result) => {
      console.log("User created:", result);
    });
  };

  return (
    <form onSubmit={handleSubmit}>
      {/* Form fields */}
      <button type="submit" disabled={isLoading}>
        {isLoading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á..." : "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"}
      </button>
    </form>
  );
};
```

### Error Types and Usage

- **VALIDATION_ERROR**: Zod validation failed (Toast: Warning)
- **DATABASE_ERROR**: Prisma database operations failed (Toast: Danger)
- **AUTHENTICATION_ERROR**: User authentication failed (Toast: Danger)
- **AUTHORIZATION_ERROR**: User lacks required permissions (Toast: Danger)
- **NOT_FOUND_ERROR**: Requested resource not found (Toast: Warning)
- **CONFLICT_ERROR**: Resource conflict (e.g., duplicate entry) (Toast: Warning)
- **NETWORK_ERROR**: Network connectivity issues (Toast: Danger)
- **UNKNOWN_ERROR**: Unexpected errors (Toast: Danger)

### Multi-language Error Messages

**‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤**

```typescript
const { showError } = useToast();

// ‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
await showError(error, { locale: "th" });

// ‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
await showError(error, { locale: "en" });
```

### Error Handling Best Practices

1. **‡πÉ‡∏ä‡πâ withErrorHandler ‡πÄ‡∏™‡∏°‡∏≠** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö server actions
2. **‡πÉ‡∏ä‡πâ createError** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö custom business logic errors
3. **‡πÉ‡∏ä‡πâ useServerAction hooks** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö client components
4. **‡πÉ‡∏ä‡πâ localized messages** ‡πÅ‡∏ó‡∏ô hardcoded error messages
5. **Log errors** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging ‡πÉ‡∏ô development mode
6. **‡πÑ‡∏°‡πà expose sensitive information** ‡πÉ‡∏ô error messages

### Available Error Handling Hooks

- `useServerAction()` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö server actions ‡∏û‡∏£‡πâ‡∏≠‡∏° error handling
- `useFormServerAction()` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö form submissions ‡∏û‡∏£‡πâ‡∏≠‡∏° error handling
- `useToast().showError()` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á localized error messages
- `useToast().showServerError()` - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á server action errors

## üß™ Testing Guidelines

### Component Testing

- Test user interactions and behavior
- Mock external dependencies
- Test error states and edge cases
- Use proper TypeScript types in tests

### API Testing

- Test authentication and authorization
- Test input validation
- Test error handling
- Test database operations

## üìä Performance Guidelines

### Code Splitting

- Use dynamic imports for large components
- Implement proper lazy loading
- Split vendor bundles appropriately

### Image Optimization

- Use Next.js Image component
- Implement proper image compression
- Use appropriate image formats
- Implement lazy loading for images

### Database Optimization

- Use proper indexing
- Implement query optimization
- Use connection pooling
- Implement proper caching strategies

## üîç Error Handling

### Client-side Error Handling

- Use proper error boundaries
- Display user-friendly error messages in Thai
- Log errors appropriately
- Implement proper fallback UI

### Server-side Error Handling

- Use proper try-catch blocks
- Return appropriate HTTP status codes
- Log errors for debugging
- Don't expose sensitive information

## üåç Internationalization

### Thai Language Support

- Use Thai language for all user-facing text
- Implement proper form validation messages in Thai
- Use appropriate date/time formatting for Thai locale
- Consider RTL support if needed

### Messages Structure Guidelines

**‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå messages ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏¢‡∏Å sections ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**

#### Structure Pattern:

```json
{
  "section": {
    "description": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á section",
    "table": {
      "title": "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á",
      "columns": { "name": "‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå" },
      "filters": { "all": "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" },
      "pagination": { "showPerPage": "‡πÅ‡∏™‡∏î‡∏á‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤" }
    },
    "forms": {
      "create": {
        "title": "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ü‡∏≠‡∏£‡πå‡∏°",
        "placeholders": { "name": "placeholder" },
        "submit": "‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á"
      },
      "edit": {
        /* similar structure */
      },
      "validation": { "required": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° validation" }
    },
    "modals": {
      "delete": {
        "title": "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ modal",
        "message": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
        "confirm": "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
        "cancel": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
      }
    },
    "actions": {
      "create": {
        "success": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        "error": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
      }
    }
  }
}
```

#### Required Sections:

- **`table`** - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- **`forms`** - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
- **`modals`** - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
- **`actions`** - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ

#### Naming Conventions:

- ‡πÉ‡∏ä‡πâ camelCase ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö keys
- ‡πÉ‡∏ä‡πâ snake_case ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö nested objects
- ‡πÉ‡∏ä‡πâ descriptive names ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- ‡πÅ‡∏¢‡∏Å placeholders, validation, ‡πÅ‡∏•‡∏∞ actions ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô

#### Usage Examples:

```typescript
// ‚úÖ Good - ‡πÉ‡∏ä‡πâ sections ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
dict.admin.users.table.title;
dict.admin.users.forms.create.title;
dict.admin.users.modals.delete.confirm;
dict.admin.users.actions.create.success;

// ‚ùå Bad - ‡πÉ‡∏ä‡πâ flat structure
dict.admin.users.title;
dict.admin.users.createTitle;
dict.admin.users.deleteConfirm;
```

## üì± Responsive Design

### Breakpoint Strategy

- Mobile-first approach
- Use Tailwind CSS breakpoints consistently
- Test on multiple device sizes
- Implement proper touch targets

## üîß Development Guidelines

### Environment Configuration

- Use proper environment variables
- Separate development and production configs
- Implement proper secrets management
- Use the established `.env.example` as reference

### Code Quality

- Follow ESLint configuration
- Use Prettier for code formatting
- Implement proper commit message conventions
- Use proper branching strategy

## üìã Additional Best Practices

1. **Path Aliases**: Always use the configured path aliases (@/, @/app/, @/client/, @/server/, @/shared/, @/schemas/, @/types/)

2. **Server Actions First**: ‡πÉ‡∏ä‡πâ Server Actions ‡πÅ‡∏ó‡∏ô API routes ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ forms ‡πÅ‡∏•‡∏∞ database operations

3. **Controller Pattern**: ‡πÅ‡∏¢‡∏Å business logic ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Controllers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ

4. **Type Safety**: Maintain strict type safety throughout the application

5. **Performance**: Use React.memo, useMemo, and useCallback judiciously

6. **Accessibility**: Implement proper ARIA attributes and semantic HTML

7. **Security**: Never expose sensitive data, validate all inputs, use proper authentication

8. **Documentation**: Comment complex logic, maintain up-to-date README

9. **Testing**: Write comprehensive tests for critical functionality

10. **Monitoring**: Implement proper error tracking and performance monitoring

11. **Toast Notifications**: ‡πÉ‡∏ä‡πâ useToast ‡πÅ‡∏ó‡∏ô console.log, alert, ‡∏´‡∏£‡∏∑‡∏≠ error states ‡πÉ‡∏ô UI

12. **Error Handling System**: ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö error handling ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö server actions ‡πÅ‡∏•‡∏∞ controllers

13. **Messages Structure**: ‡πÅ‡∏¢‡∏Å sections ‡πÉ‡∏ô messages ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (table, forms, modals, actions)

14. **Component Organization**: ‡πÅ‡∏¢‡∏Å components ‡∏ï‡∏≤‡∏° functionality (forms, layout, shared, pages)

15. **Hook Organization**: ‡πÅ‡∏¢‡∏Å hooks ‡∏ï‡∏≤‡∏° purpose (auth, data, ui, utils)

## üö® CRITICAL: File Editing Rules

### Messages Files Editing Rules

**‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå messages (th.json, en.json) ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:**

1. **NEVER use edit_file tool for messages files** - ‡πÉ‡∏ä‡πâ search_replace ‡πÅ‡∏ó‡∏ô
2. **ALWAYS read the entire file first** - ‡πÉ‡∏ä‡πâ read_file ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
3. **Use search_replace with exact context** - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ context ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á
4. **Make only ONE change per tool call** - ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏•‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
5. **Verify JSON syntax after each change** - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ JSON ‡∏¢‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
6. **If linter error occurs, STOP and reassess** - ‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ã‡πâ‡∏≥‡πÜ

### Example of CORRECT approach:

```typescript
// 1. Read current file first
read_file("messages/th.json", true, 1, 300);

// 2. Use search_replace with exact context
search_replace(
  "messages/th.json",
  `    "errors": {
        "notFound": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö",
        "unauthorized": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á"
    },
    "carBrands": {`,
  `    "errors": {
        "notFound": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö",
        "unauthorized": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á"
    },
    "carBrands": {
        "title": "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ",
        "table": {
            "ariaLabel": "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ",
            "columns": {
                "name": "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå",
                "createdAt": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á",
                "actions": "‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
            }
        }
    },`
);
```

### Example of WRONG approach:

```typescript
// ‚ùå DON'T DO THIS - Using edit_file with partial content
edit_file("messages/th.json", "‡πÄ‡∏û‡∏¥‡πà‡∏° carBrands section", `"carBrands": {...}`);

// ‚ùå DON'T DO THIS - Multiple changes at once
edit_file("messages/th.json", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏•‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô", `"section1": {...}, "section2": {...}`);
```

### Loop Prevention Rules

1. **Maximum 3 attempts per file** - ‡∏´‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
2. **Always verify before proceeding** - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡πà‡∏≠‡πÑ‡∏õ
3. **Use git status to check changes** - ‡πÉ‡∏ä‡πâ git status ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
4. **If stuck, revert and start over** - ‡∏´‡∏≤‡∏Å‡∏ï‡∏¥‡∏î ‡πÉ‡∏´‡πâ revert ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà

## üéØ Code Review Checklist

Before submitting code, ensure:

- [ ] TypeScript compilation passes without errors
- [ ] ESLint passes without warnings
- [ ] Prettier formatting is applied
- [ ] All imports use proper path aliases
- [ ] Components follow established patterns
- [ ] Error handling is implemented with proper error handling system
- [ ] Thai language is used for user-facing text
- [ ] Messages follow structured sections (table, forms, modals, actions)
- [ ] Responsive design is implemented
- [ ] Performance considerations are addressed
- [ ] Security best practices are followed
- [ ] Toast notifications are used appropriately

---

## üìù Notes for AI Assistants

When working with this codebase:

1. **Architecture Priority**: ‡πÉ‡∏ä‡πâ Server Actions + Controllers ‡πÅ‡∏ó‡∏ô API routes ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
2. **Error Handling Priority**: ‡πÉ‡∏ä‡πâ withErrorHandler ‡πÅ‡∏•‡∏∞ createError ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö server actions ‡πÅ‡∏•‡∏∞ controllers
3. **Messages Structure Priority**: ‡πÅ‡∏¢‡∏Å sections ‡πÉ‡∏ô messages ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
4. **Toast Notifications**: ‡πÉ‡∏ä‡πâ useToast ‡πÅ‡∏ó‡∏ô console.log ‡∏´‡∏£‡∏∑‡∏≠ alert
5. **Component Organization**: ‡πÅ‡∏¢‡∏Å components ‡∏ï‡∏≤‡∏° functionality
6. **No Index Files**: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ index.ts files ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export - import ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
7. **File Editing Rules**: ‡πÉ‡∏ä‡πâ search_replace ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö messages files, ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ edit_file
8. **Loop Prevention**: ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
9. Always respect the established architecture patterns
10. Use the existing components and hooks before creating new ones
11. Follow the Thai language convention for user-facing text
12. Maintain consistency with the existing code style
13. Consider the full-stack implications of changes
14. Test changes thoroughly across different scenarios
15. Update documentation when making architectural changes

16. Always respect the established architecture patterns
17. Use the existing components and hooks before creating new ones
18. Follow the Thai language convention for user-facing text
19. Maintain consistency with the existing code style
20. Consider the full-stack implications of changes
21. Test changes thoroughly across different scenarios
22. Update documentation when making architectural changes
    alwaysApply: true

---

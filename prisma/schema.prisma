// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  BOOKING_CANCELLATION
  PAYMENT_CONFIRMATION
  SYSTEM_UPDATE
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String?   @unique
  password      String
  role          UserRole  @default(CUSTOMER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  customer Customer?
  staff    Staff?
  notifications Notification[]

  @@map("users")
}

model Customer {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  phone     String?
  address   String?
  birthDate DateTime?
  preferences Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("customers")
}

model Staff {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  phone     String?
  position  String?
  bio       String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  staffServices StaffService[]
  bookings Booking[]

  @@map("staff")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // in minutes
  price       Decimal  @db.Decimal(10, 2)
  category    String?
  isActive    Boolean  @default(true)
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  staffServices StaffService[]
  bookings Booking[]

  @@map("services")
}

model StaffService {
  id        String   @id @default(cuid())
  staffId   String
  serviceId String
  createdAt DateTime @default(now())

  // Relations
  staff   Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([staffId, serviceId])
  @@map("staff_services")
}

model Booking {
  id          String        @id @default(cuid())
  customerId  String
  staffId     String
  serviceId   String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  totalPrice  Decimal       @db.Decimal(10, 2)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  staff    Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationPreference {
  id        String   @id @default(cuid())
  userId    String   @unique
  email     Boolean  @default(true)
  sms       Boolean  @default(false)
  push      Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notification_preferences")
}

model BusinessSettings {
  id        String   @id @default(cuid())
  name      String
  address   String?
  phone     String?
  email     String?
  website   String?
  logo      String?
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("business_settings")
}




